{"version":3,"file":"wdio-video-reporter.js","sources":["../src/config.js","../src/helpers.js","../src/assets/not-available.png","../src/frameworks/default.js","../src/frameworks/cucumber.js","../src/index.js"],"sourcesContent":["export const defaultOutputDir = '_results_';\n\nexport default {\n  debugMode: false,\n\n  logLevel: 'info',\n\n  videoRenderTimeout: 5,\n\n  outputDir: defaultOutputDir,\n  allureOutputDir: 'allure-results',\n\n  // Where to save screenshots\n  rawPath: 'rawSeleniumVideoGrabs',\n\n  // Should an allure report be updated with videos\n  // There is a bug, or just bad design really, where\n  // Allure is needed to make sure the videos have\n  // time to be saved before the process exits\n  usingAllure: false,\n\n  // Should all videos be saved, or only from failed tests\n  saveAllVideos: false,\n\n  // Video slowdown multiplier\n  videoSlowdownMultiplier: 3,\n\n  // Video scale, see https://trac.ffmpeg.org/wiki/Scaling\n  videoScale: '1200:trunc(ow/a/2)*2',\n\n  // Max chars for test names, adjust according to current system\n  maxTestNameCharacters: 250,\n\n  //\n  // JSON Wire protocol\n  //\n\n  // Which commands should be excluded from screenshots\n  excludedActions: [\n\n  ],\n\n  // Which commands should result in a screenshot (without `/session/:sessionId/`)\n  // https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol\n  jsonWireActions: [\n    'url',\n    'forward',\n    'back',\n    'refresh',\n    'execute',\n    'size',\n    'position',\n    'maximize',\n    'click',\n    'submit',\n    'value',\n    'keys',\n    'clear',\n    'selected',\n    'enabled',\n    'displayed',\n    'orientation',\n    'alert_text',\n    'accept_alert',\n    'dismiss_alert',\n    'moveto',\n    'buttondown',\n    'buttonup',\n    'doubleclick',\n    'down',\n    'up',\n    'move',\n    'scroll',\n    'doubleclick',\n    'longclick',\n    'flick',\n    'location',\n  ],\n\n  // If test speed is not an issue, this option can be enabled to do a screenshot on every json wire message\n  recordAllActions: false,\n\n};\n","import allureReporter from '@wdio/allure-reporter';\nimport { path as ffmpegPath} from '@ffmpeg-installer/ffmpeg';\nimport path from 'path';\nimport fs from 'fs-extra';\nimport { spawn } from 'child_process';\n\nimport config from './config.js';\n\nlet writeLog;\nexport default {\n  sleep(ms) {\n    const stop = new Date().getTime() + ms;\n    while(new Date().getTime() < stop);\n  },\n\n  setLogger(obj) {\n    writeLog = obj;\n  },\n\n  debugLog(msg) {\n    if (config.debugMode) {\n      writeLog(msg);\n    }\n  },\n\n  generateFilename(browserName, fullname) {\n    const date = new Date();\n    const msec = ('000' + date.getMilliseconds()).slice(-3);\n    const timestamp = date.toLocaleString('iso', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n    }).replace(/[ ]/g, '--').replace(/:|\\//g, '-') + `-${msec}`;\n\n    let filename = encodeURIComponent(\n      `${\n        fullname.replace(/\\s+/g, '-')\n      }--${browserName}--${timestamp}`\n    ).replace(/%../g, '')\n     .replace(/\\./g, '-')\n     .replace(/[/\\\\?%*:'|\"<>()]/g, '');\n\n    if (filename.length > config.maxTestNameCharacters) {\n      const truncLength = (config.maxTestNameCharacters - 2)/2;\n      filename = filename.slice(0, truncLength) + '--' + filename.slice(-truncLength);\n    }\n\n    return filename;\n  },\n\n  generateVideo() {\n    const videoPath = path.resolve(config.outputDir, this.testname + '.mp4');\n    this.videos.push(videoPath);\n\n    //send event to nice-html-reporter\n    process.emit('test:video-capture', videoPath);\n\n    if (config.usingAllure) {\n      allureReporter.addAttachment('Execution video', videoPath, 'video/mp4');\n    }\n\n    const command = `\"${ffmpegPath}\"`;\n    const args = [\n      '-y',\n      '-r', '10',\n      '-i', `\"${this.recordingPath}/%04d.png\"`,\n      '-vcodec', 'libx264',\n      '-crf', '32',\n      '-pix_fmt', 'yuv420p',\n      '-vf', `\"scale=${config.videoScale}\",\"setpts=${config.videoSlowdownMultiplier}.0*PTS\"`,\n      `\"${videoPath}\"`,\n    ];\n\n    if (config.debugMode) {\n      writeLog(`ffmpeg command: ${command + ' ' + args}\\n`);\n    }\n\n    const promise = Promise\n      .all(this.screenshotPromises || [])\n      .then(() => new Promise((resolve) => {\n        const cp = spawn(command, args, {\n          stdio: 'ignore',\n          shell: true,\n          windowsHide: true,\n        });\n\n        cp.on('close', () => {\n          resolve();\n        });\n      }));\n\n    this.videoPromises.push(promise);\n    return promise;\n  },\n\n  waitForVideosToExist(videos, abortTime) {\n    let allExist = false;\n    let allGenerated = false;\n\n    do {\n      this.sleep(100);\n      allExist = videos\n        .map(v => fs.existsSync(v))\n        .reduce((acc, cur) => acc && cur, true);\n      if (allExist) {\n        allGenerated = videos\n          .map(v => fs.statSync(v).size)\n          .reduce((acc, cur) => acc && cur > 48, true);\n      }\n    } while (new Date().getTime() < abortTime && !(allExist && allGenerated));\n  },\n\n  waitForVideosToBeWritten(videos, abortTime) {\n    let allSizes = [];\n    let allConstant = false;\n\n    do {\n      this.sleep(100);\n      let currentSizes = videos.map(filename => ({filename, size: fs.statSync(filename).size}));\n      allSizes = [...allSizes, currentSizes].slice(-3);\n\n      allConstant = allSizes.length === 3 && currentSizes\n        .reduce((accOuter, curOuter) => accOuter && allSizes\n            .reduce((accFilter, curFilter) => [...accFilter, curFilter.filter(v => v.filename === curOuter.filename).pop()], [])\n            .map(v => v.size)\n            .reduce((accInner, curInner) => accInner && curInner === curOuter.size, true), true);\n    } while(new Date().getTime() < abortTime && !allConstant);\n  },\n\n  getCurrentCapabilities (videoReporterObject) {\n    const currentCapabilities = videoReporterObject.isMultiremote\n      ? videoReporterObject.capabilities[Object.keys(videoReporterObject.capabilities)[0]]\n      : videoReporterObject.capabilities;\n    return currentCapabilities;\n  },\n};\n","export default ''","import mkdirp from 'mkdirp';\nimport path from 'path';\nimport fs from 'fs-extra';\n\nimport helpers from '../helpers.js';\nimport config from '../config.js';\n\nexport default {\n  /**\n   * Init\n   */\n  frameworkInit () {\n\n  },\n\n  /**\n   * Set reporter options\n   */\n  constructor () {\n\n  },\n\n  /**\n   * Set wdio config options\n   */\n  onRunnerStart () {\n\n  },\n\n  /**\n   * Save screenshot or add not available image movie stills\n   */\n  onAfterCommand () {\n\n  },\n\n  /**\n   * Add suite name to naming structure\n   */\n  onSuiteStart (suite) {\n    this.testnameStructure.push(suite.title.replace(/ /g, '-').replace(/-{2,}/g, '-'));\n  },\n\n  /**\n   * Cleare suite name from naming structure\n   */\n  onSuiteEnd () {\n\n  },\n\n  /**\n   * Setup filename based on test name and prepare storage directory\n   */\n  onTestStart (test) {\n    helpers.debugLog(`\\n\\n--- New test: ${test.title} ---\\n`);\n    this.testnameStructure.push(test.title.replace(/ /g, '-'));\n    const fullname = this.testnameStructure.slice(1).reduce((cur, acc) => cur + '--' + acc, this.testnameStructure[0]);\n\n    let browserName = 'browser';\n    const capabilities = helpers.getCurrentCapabilities(this);\n\n\n    if(capabilities.browserName) {\n      browserName = capabilities.browserName.toUpperCase();\n    } else if(capabilities.deviceName) {\n      browserName = `${capabilities.deviceName.toUpperCase()}-${capabilities.platformName.toUpperCase()}`;\n    }\n\n    if (capabilities.deviceType) {\n      browserName += `-${capabilities.deviceType.replace(/ /g, '-')}`;\n    }\n    this.testname = helpers.generateFilename(browserName, fullname);\n    this.frameNr = 0;\n    this.recordingPath = path.resolve(config.outputDir, config.rawPath, this.testname);\n    mkdirp.sync(this.recordingPath);\n  },\n\n  /**\n   * Remove empty directories\n   */\n  onTestSkip () {\n    if(this.recordingPath !== undefined) {\n      fs.removeSync(this.recordingPath);\n    }\n  },\n\n  /**\n   * Add attachment to Allue if applicable and start to generate the video\n   * Not applicable to Cucumber\n   */\n  onTestEnd () {\n\n  },\n\n  /**\n   * Finalize report if using allure and clean up\n   */\n  onRunnerEnd () {\n\n  },\n};\n","import allureReporter from '@wdio/allure-reporter';\nimport mkdirp from 'mkdirp';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport helpers from '../helpers.js';\nimport config from '../config.js';\nimport notAvailableImage from '../assets/not-available.png';\n\nexport default {\n  /**\n   * Init\n   */\n  frameworkInit () {\n\n  },\n  /**\n   * Set reporter options\n   */\n  constructor () {\n\n  },\n\n  /**\n   * Set wdio config options\n   */\n  onRunnerStart () {\n\n  },\n\n  /**\n   * Save screenshot or add not available image movie stills\n   */\n  onAfterCommand () {\n\n  },\n\n  /**\n   * Add suite name to naming structure\n   */\n  onSuiteStart (suite) {\n    this.testnameStructure.push(suite.title.replace(/ /g, '-').replace(/-{2,}/g, '-'));\n    if (suite.type === 'scenario') {\n      const fullname = this.testnameStructure.slice(1).reduce((cur, acc) => cur + '--' + acc, this.testnameStructure[0]);\n\n      let browserName = 'browser';\n\n      const capabilities = helpers.getCurrentCapabilities(this);\n\n      if(capabilities.browserName) {\n        browserName = capabilities.browserName.toUpperCase();\n      } else if(capabilities.deviceName) {\n        browserName = `${capabilities.deviceName.toUpperCase()}-${capabilities.platformName.toUpperCase()}`;\n      }\n\n      if (capabilities.deviceType) {\n        browserName += `-${capabilities.deviceType.replace(/ /g, '-')}`;\n      }\n      this.testname = helpers.generateFilename(browserName, fullname);\n      this.frameNr = 0;\n      this.recordingPath = path.resolve(config.outputDir, config.rawPath, this.testname);\n      if (!fs.existsSync(this.recordingPath)) {\n        mkdirp.sync(this.recordingPath);\n      }\n    }\n  },\n\n  /**\n   * Clear suite name from naming structure\n   */\n  onSuiteEnd (suite) {\n    if (config.usingAllure) {\n      const capabilities = helpers.getCurrentCapabilities(this);\n\n      if (capabilities.deviceType) {\n        allureReporter.addArgument('deviceType', capabilities.deviceType);\n      }\n      if (capabilities.browserVersion) {\n        allureReporter.addArgument('browserVersion', capabilities.browserVersion);\n      }\n    }\n\n    if (suite.type === 'scenario') {\n      const hasFailedTests = suite.tests.filter(test => test.state === 'failed').length > 0;\n      const allTestsPassed = suite.tests.filter(test => test.state === 'failed').length === 0;\n\n      if (hasFailedTests || (allTestsPassed && config.saveAllVideos)) {\n        const filePath = path.resolve(this.recordingPath, this.frameNr.toString().padStart(4, '0') + '.png');\n        try {\n          browser.saveScreenshot(filePath);\n          helpers.debugLog('- Screenshot!!\\n');\n        } catch (e) {\n          fs.writeFile(filePath, notAvailableImage, 'base64');\n          helpers.debugLog('- Screenshot not available...\\n');\n        }\n\n        helpers.generateVideo.call(this);\n      }\n    }\n  },\n\n  /**\n   * Setup filename based on test name and prepare storage directory\n   */\n  onTestStart () {\n\n  },\n\n  /**\n   * Remove empty directories\n   */\n  onTestSkip () {\n\n  },\n\n  /**\n   * Add attachment to Allue if applicable and start to generate the video\n   * Not applicable to Cucumber\n   */\n  onTestEnd () {\n\n  },\n\n  /**\n   * Finalize report if using allure and clean up\n   */\n  onRunnerEnd () {\n\n  },\n};\n","import WdioReporter from '@wdio/reporter';\nimport allureReporter from '@wdio/allure-reporter';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport helpers from './helpers.js';\nimport config from './config.js';\nimport notAvailableImage from './assets/not-available.png';\n\nimport defaultFramework from './frameworks/default.js';\nimport cucumberFramework from './frameworks/cucumber.js';\n\nexport default class Video extends WdioReporter {\n  /**\n   * Set reporter options\n   */\n  constructor (options) {\n    if (options.logLevel === 'silent') {\n      options.logFile = undefined;\n    }\n    super(options);\n\n    this.isDone = false;\n\n    // User options\n    if(options.outputDir) {\n      config.outputDir = options.outputDir;\n    } else {\n      // Wdio doesn't pass outputDir, but logFile which includes outputDir\n      config.outputDir = options.logFile ? path.dirname(options.logFile) : config.outputDir;\n    }\n    if(config.outputDir.length > 1) {\n      config.outputDir = config.outputDir.replace(/[\\/|\\\\]$/, '');\n    }\n    config.saveAllVideos = options.saveAllVideos || config.saveAllVideos;\n    config.videoSlowdownMultiplier = options.videoSlowdownMultiplier || config.videoSlowdownMultiplier;\n    config.videoScale = options.videoScale || config.videoScale;\n    config.videoRenderTimeout = options.videoRenderTimeout || config.videoRenderTimeout;\n    config.excludedActions.push(...(options.addExcludedActions || []));\n    config.jsonWireActions.push(...(options.addJsonWireActions || []));\n    config.recordAllActions = options.recordAllActions || false;\n    config.maxTestNameCharacters = options.maxTestNameCharacters || config.maxTestNameCharacters;\n    config.logLevel = options.logLevel || config.logLevel;\n\n    this.screenshotPromises = [];\n    this.videos = [];\n    this.videoPromises = [];\n    this.testnameStructure = [];\n    this.testname = '';\n    this.frameNr = 0;\n    this.videos = [];\n    this.config = config;\n    this.isMultiremote = false;\n    this.capabilities = {};\n    this.sessionId;\n    this.runnerInstance;\n\n\n    helpers.setLogger(msg => this.write(msg));\n  }\n\n\n  /**\n   * overwrite isSynchronised method\n   */\n  get isSynchronised () {\n    return this.isDone;\n  }\n\n  /**\n   * Set wdio config options\n   */\n  onRunnerStart (runner) {\n    this.capabilities = runner.capabilities;\n    this.isMultiremote = runner.isMultiremote || false;\n\n    const sessionId = runner.isMultiremote\n      ? Object.entries(runner.capabilities).map(([, capabilities]) => capabilities.sessionId)\n      : runner.sessionId;\n    this.sessionId = sessionId;\n\n    const runnerInstance = runner.isMultiremote\n      ? runner.instanceOptions[sessionId[0]]\n      : runner.instanceOptions[sessionId];\n    this.runnerInstance = runnerInstance;\n\n    const allureConfig = runnerInstance.reporters.filter(r => r === 'allure' || r[0] === 'allure').pop();\n\n    if (allureConfig && allureConfig[1] && allureConfig[1].outputDir) {\n      config.allureOutputDir = path.resolve(allureConfig[1].outputDir);\n    }\n    config.usingAllure = !!allureConfig;\n    const logLevel = runnerInstance.logLevel;\n\n    config.debugMode = logLevel.toLowerCase() === 'trace' || logLevel.toLowerCase() === 'debug';\n\n    helpers.debugLog('Using reporter config:' + JSON.stringify(runnerInstance.reporters, undefined, 2) + '\\n\\n');\n    helpers.debugLog('Using config:' + JSON.stringify(config, undefined, 2) + '\\n\\n\\n');\n\n    // Jasmine and Mocha ought to behave the same regarding test-structure\n    this.framework = runnerInstance.framework === 'cucumber' ? cucumberFramework : defaultFramework;\n    this.framework.frameworkInit.call(this, browser);\n\n    if(config.usingAllure) {\n      process.on('exit', () => this.onExit.call(this));\n    }\n  }\n\n  /**\n   * Save screenshot or add not available image movie stills\n   */\n  onAfterCommand (jsonWireMsg) {\n    const command = jsonWireMsg.endpoint && jsonWireMsg.endpoint.match(/[^\\/]+$/);\n    const commandName = command ? command[0] : 'undefined';\n\n    helpers.debugLog('Incoming command: ' + jsonWireMsg.endpoint + ' => [' + commandName + ']\\n');\n\n    // Filter out non-action commands and keep only last action command\n    if ((!config.recordAllActions && (config.excludedActions.includes(commandName) || !config.jsonWireActions.includes(commandName)))\n        || !this.recordingPath) {\n      return;\n    }\n\n    const filename = this.frameNr.toString().padStart(4, '0') + '.png';\n    const filePath = path.resolve(this.recordingPath, filename);\n\n    // Create the report directory, if it does not exists\n    if (!fs.existsSync(this.recordingPath)) {\n      helpers.debugLog(`Creating: ${this.recordingPath}, as it not exists...\\n`);\n      fs.mkdirsSync(this.recordingPath);\n    }\n\n    try {\n      this.screenshotPromises.push(\n        browser.saveScreenshot(filePath).then(() => {\n          helpers.debugLog('- Screenshot!!\\n');\n        })\n      );\n    } catch (e) {\n      fs.writeFile(filePath, notAvailableImage, 'base64');\n      helpers.debugLog('- Screenshot not available...\\n');\n    }\n    this.frameNr++;\n  }\n\n  /**\n   * Add suite name to naming structure\n   */\n  onSuiteStart (suite) {\n    helpers.debugLog(`\\n\\n\\n--- New suite: ${suite.title} ---\\n`);\n    this.framework.onSuiteStart.call(this, suite);\n  }\n\n  /**\n   * Cleare suite name from naming structure\n   */\n  onSuiteEnd (suite) {\n    this.testnameStructure.pop();\n    this.framework.onSuiteEnd.call(this, suite);\n  }\n\n  /**\n   * Setup filename based on test name and prepare storage directory\n   */\n  onTestStart (test) {\n    this.framework.onTestStart.call(this, test);\n  }\n\n  /**\n   * Remove empty directories\n   */\n  onTestSkip (test) {\n    this.framework.onTestSkip.call(this, test);\n  }\n\n  /**\n   * Add attachment to Allue if applicable and start to generate the video (Not applicable to Cucumber)\n   */\n  onTestEnd (test) {\n    this.testnameStructure.pop();\n\n    if(config.usingAllure) {\n\n      const capabilities = helpers.getCurrentCapabilities(this);\n\n      if (capabilities.deviceType) {\n        allureReporter.addArgument('deviceType', capabilities.deviceType);\n      }\n      if (capabilities.browserVersion) {\n        allureReporter.addArgument('browserVersion', capabilities.browserVersion);\n      }\n    }\n\n    if (test.state === 'failed' || (test.state === 'passed' && config.saveAllVideos)) {\n      const filePath = path.resolve(this.recordingPath, this.frameNr.toString().padStart(4, '0') + '.png');\n      try {\n        this.screenshotPromises.push(\n          browser.saveScreenshot(filePath).then(() => {\n            helpers.debugLog('- Screenshot!!\\n');\n          })\n        );\n      } catch (e) {\n        fs.writeFile(filePath, notAvailableImage, 'base64');\n        helpers.debugLog('- Screenshot not available...\\n');\n      }\n\n      helpers.generateVideo.call(this);\n    }\n  }\n\n  /**\n   * Wait for all ffmpeg-processes to finish\n   */\n  onRunnerEnd () {\n    let abortTimer;\n    let started = false;\n    const wrapItUp = () => {\n      if (!started) {\n        clearTimeout(abortTimer);\n        started = true;\n        helpers.debugLog(`\\n--- FFMPEG is done ---\\n\\n`);\n\n        if (config.logLevel !== 'silent') {\n          this.write('\\nGenerated:' + JSON.stringify(this.videos, undefined, 2) + '\\n\\n');\n          this.write(`\\n\\nVideo reporter Done!\\n`);\n        }\n\n        this.isDone = true;\n      }\n    };\n\n    Promise.all(this.videoPromises)\n      .then(wrapItUp)\n      .catch(wrapItUp);\n\n\n    abortTimer = setTimeout(() => {\n      this.write(`videoRenderTimeout triggered before ffmpeg had a chance to wrap up`);\n      wrapItUp();\n    }, config.videoRenderTimeout*1000);\n  }\n\n  /**\n   * Finalize allure report\n   */\n  onExit () {\n    const abortTime = new Date().getTime() + config.videoRenderTimeout*1000;\n\n    helpers.waitForVideosToExist(this.videos, abortTime);\n    helpers.waitForVideosToBeWritten(this.videos, abortTime);\n\n    if (new Date().getTime() > abortTime) {\n      console.log(`videoRenderTimeout triggered, not all videos finished writing to disk before patching Allure`);\n    }\n\n    fs\n      .readdirSync(config.allureOutputDir)\n      .filter(line => line.includes('.mp4'))\n      .map(filename => path.resolve(config.allureOutputDir, filename))\n      .filter(allureFile => fs.statSync(allureFile).size < 1024)\n      .filter(allureFile => this.videos.includes(fs.readFileSync(allureFile).toString())) // Dont parse other browsers videos since they may not be ready\n      .forEach((filePath) => {\n        const videoFilePath = fs.readFileSync(filePath).toString(); // The contents of the placeholder file is the video path\n        if (fs.existsSync(videoFilePath)) {\n          fs.copySync(videoFilePath, filePath);\n        }\n      });\n  }\n}\n\n\n"],"names":["ffmpegPath","spawn"],"mappings":"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"}